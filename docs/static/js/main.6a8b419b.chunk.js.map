{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","limit","setLimit","useState","inputValue","setInputValue","numberValue","setNumberValue","onSubmit","e","console","log","preventDefault","trim","length","cats","htmlFor","className","id","type","value","onChange","target","placeholder","required","defaultProps","GifGridItem","title","url","loading","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","parseInt","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAA0C,IAAvCC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,SAEjD,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,mBAASF,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAqBA,OACI,uBAAMC,SAZW,SAACC,GAClBC,QAAQC,IAAI,cACZF,EAAEG,iBACCR,EAAWS,OAAOC,OAAS,IAC1Bd,GAAe,SAAAe,GAAI,OAAKX,GAAL,mBAAoBW,OACvCb,EAASI,GACTD,EAAc,MAMlB,UACI,uBAAOW,QAAQ,aAAaC,UAAU,OAAtC,oBACA,uBAAOD,QAAQ,cAAcC,UAAU,QAAvC,gCACA,uBAAOA,UAAU,OAAOC,GAAG,aAAaC,KAAK,OAAOC,MAAOhB,EAAYiB,SAvBrD,SAACZ,GACvBJ,EAAcI,EAAEa,OAAOF,QAsBmFG,YAAY,cAAcC,UAAQ,IACxI,uBAAOP,UAAU,QAAQC,GAAG,cAAcC,KAAK,SAASC,MAAOd,EAAae,SApBzD,SAACZ,GACxBF,EAAeE,EAAEa,OAAOF,QAmBwFG,YAAY,eAAeC,UAAQ,IAC/I,wBAAQL,KAAK,SAAb,wBAWZpB,EAAY0B,aAAe,CACvBxB,MAAO,I,YC3CEyB,EAAc,SAAC,GAAuB,EAArBR,GAAsB,IAAlBS,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKX,UAAU,yCAAf,UACI,qBAAKY,QAAQ,OAAOC,IAAKF,EAAKG,IAAKJ,IACnC,4BAAIA,Q,uBCLHK,EAAO,uCAAG,WAAQC,EAAUhC,GAAlB,uBAAAiC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,2DACyGhC,GADzG,SAEAmC,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHxB,GAAIwB,EAAIxB,GACRS,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZY,GAbY,4CAAH,wDCGPK,EAAU,SAAC,GAA2B,IAAxBZ,EAAuB,EAAvBA,SACvB,ECFwB,SAAEA,EAAUhC,GACpC,MAA0BE,mBAAS,CAC/BoC,KAAM,GACNV,SAAS,IAFb,mBAAOiB,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACPhB,EAAQC,EAAUhC,GAAOgD,MAAM,SAAAC,GAC3BH,EAAS,CACLR,KAAMW,EACNrB,SAAS,SAGlB,CAACI,IAEGa,EDb0BK,CAAclB,EADD,EAAbhC,OACpB0C,EAAb,EAAQJ,KAAaV,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIZ,UAAU,oCAAd,cAAqDgB,EAArD,OAEEJ,GAAW,aAEb,qBAAKZ,UAAU,YAAf,SAEQ0B,EAAOF,KAAK,SAACW,GAAD,OACR,cAAC,EAAD,eAAgCA,GAAdA,EAAMlC,aEZnCmC,EAAe,WAGxB,MAAoClD,mBAAS,IAA7C,mBAAOmD,EAAP,KAAmBtD,EAAnB,KACA,EAA0BG,mBAAS,IAAnC,mBAAOF,EAAP,KAAcC,EAAd,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaF,cAAgBA,EAAgBC,MAAQsD,SAAStD,GAASC,SAAWA,IAElF,6BAEQoD,EAAWb,KAAK,SAAAR,GAAQ,OAAI,cAAC,EAAD,CAA0BA,SAAWA,EAAWhC,MAAQA,GAAzCgC,Y,MCZ/DuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6a8b419b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories, limit, setLimit } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [numberValue, setNumberValue] = useState(limit)\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleNumberChange = (e) => {\r\n        setNumberValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        console.log(\"Sending...\");\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setLimit(numberValue);\r\n            setInputValue('');\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <label htmlFor=\"searchText\" className=\"long\">Buscar</label>\r\n            <label htmlFor=\"limitNumber\" className=\"short\">Imagenes a buscar </label>   \r\n            <input className=\"long\" id=\"searchText\" type=\"text\" value={inputValue} onChange={ handleInputChange } placeholder=\"Buscar ... \" required></input>\r\n            <input className=\"short\" id=\"limitNumber\" type=\"number\" value={numberValue} onChange={ handleNumberChange } placeholder=\"Cantidad ...\" required></input>\r\n            <button type=\"submit\">Buscar</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n    setLimit: PropTypes.func.isRequired,\r\n    limit: PropTypes.number\r\n};\r\n\r\nAddCategory.defaultProps = {\r\n    limit: 10\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img loading=\"lazy\" src={url} alt={title}></img>\r\n            <p>{title}</p> \r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async ( category, limit ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=qDztc72DVTExWL6cX9V8LSluRvi4jv4G&limit=${limit}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ( { category, limit } ) => {\r\n    const { data:images, loading } = useFetchGifs( category, limit );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && 'Loading...'}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (image) =>  (\r\n                        <GifGridItem key={image.id} {...image} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category, limit ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => { \r\n        getGifs(category, limit).then( imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    \r\n    const [categories, setCategories] = useState([]);\r\n    const [limit, setLimit] = useState(10);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>  \r\n            <AddCategory setCategories={ setCategories } limit={ parseInt(limit) } setLimit={ setLimit } />\r\n\r\n            <ul>\r\n                {\r\n                    categories.map( category => <GifGrid key={ category } category={ category } limit={ limit } /> )\r\n                }\r\n            </ul>\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GifExpertApp } from './GifExpertApp';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}